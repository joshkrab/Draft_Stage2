// Лекция по Ajax ____________________________________________________

// Протоколы
// http - протокол для передачи гипертекста, изначадльно для html
// передача произвольных данных, клиент-серверного взаимодействия
// без сохранения промежуточного состояния

// В роли клиента чаще всего наш браузер, любое устройство

// Http methods:
// GET - запрашивает предоставление ресурса, для извлечения данных,
// только для получения информации, ничего не меняя на сервере - безопасно
// не имеет тела

// POST - имеет тело(в которое добавляем п-ры, кот нужно изменять),
// может менять информацию на сервере, отправка чего - то

// PUT - заменяем данные своими, полностью объект

// PATCH - частичное изменение заданых полей данных

// Запрос/ответ по этому протоколу состоит из таких свойств:
// HTTP STATUS CODES:
// 1xx - Information
// 2xx - Successfull
// 3xx - Redirection
// 4xx - Client Error
// 5xx - Server Error

// Данные передаются открыто и небезопасно для перехвата, поэтому придумали:
// HTTPSecure - https
// Шифрование по средствам криптографических протоколов SSL и TLS
// Сначала идет запрос сертификации, потом уже как http

// Другие протоколы:
//  DHCP, SMTR, POP3, SSH, FTP

// JSON ____________________________________________________________________
// Это формат данных, собственного стандарта. В большинстве языках.
// В js - некая сущность, нельзя вызвать как ф-ю или создать как объект.

// Метод JSON.stringify - передача данных или собрирает обратно парсу:
// JSON.parse - разбирает строку

// AJAX _____________________________________________________________________
// Асинхронный js и xml, набор методов, позволяет работать приложению асинхронно
// Обработка запросов к серверу, в фоновом режиме
// Преимущества:
// - чтение данных с сервера, после загрузки страница
// - обновление страницы без перезагрузки страницы
// - отправка данных на сервер в фоновом режиме

// http запрос состоит из 4х частей:

// - http method (Get, Post...)
// - URL - запрашиваемый адрес
// - headers
// - body

// 3 метода работы с заголовками:
// setRequestHeader(name9, value); // задать по имени запроса со значением
// getResponseHeader(name9); // получить значение заголовка, кроме Set-Cookie
// getAllResponseHeaders(); // получить все хедеры из ответа, кроме Set-Cookie

// Значение хедера нельзя перезаписать, оно будет только добавляться:
// xhr.setRequestHeader('X-Auth', '123');
// xhr.setRequestHeader('X-Auth', '456');

// Пример _________________________________________________________________
// 1. Создаем новый объект XMLHttpRequest
var xhr = new XMLHttpRequest();
// 2. Конфигурируем его: Get-запрос на Url
xhr.open('GET', 'url', false); // Инициализация, если false - синхронно, по умолч. асинхронно тру
// 3. Отсылаем запрос
xhr.send();
// 4. Если код ответа сервера не 200, то это ошибка
if (xhr.status != 200) {
   // Обработать ошибку:
   console.log(xhr.status + ':' + xhr.statusText); // Пример вывода 404: Not Found
} else {
   console.log(xhr.responseText); // Текст ответа
}

// Promise _______________________________________________________________________________
